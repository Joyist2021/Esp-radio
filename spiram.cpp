//******************************************************************************************
// SPI RAM 例程。                                                                      *
//******************************************************************************************
// 使用 SPI RAM 作为 32 字节块的循环缓冲区。                              *
//******************************************************************************************

#include <ESP8266Spiram.h>                  // https://github.com/Gianbacchio/ESP8266_Spiram

#define SRAM_SIZE  131072                   // 总大小 SPI ram（bytes字节为单位）
#define CHUNKSIZE      32                   // 块大小
#define SRAM_CH_SIZE 4096                   // 以块为单位 的总大小 SPI ram

#define SRAM_CS        10                   // GPIO1O SRAM CS 引脚
#define SRAM_FREQ    16e6                   // 理论上支持最高20MHz 

// SRAM opcodes操作码
#define SRAM_READ    0x03
#define SRAM_WRITE   0x02

// 全局变量
uint16_t   chcount ;                       // 当前在缓冲区中的块数
uint32_t   readinx ;                       // 读取索引
uint32_t   writeinx ;                      // 写索引

ESP8266Spiram spiram ( SRAM_CS, SRAM_FREQ ) ;


//******************************************************************************************
//                              可用空间                                *
//******************************************************************************************
// 如果缓冲区空间可用，则返回 true。                                               *
//******************************************************************************************
bool spaceAvailable()
{
  return ( chcount < SRAM_CH_SIZE ) ;
}


//******************************************************************************************
//                              可用数据                                  *
//******************************************************************************************
// 返回缓冲区中可用的块数。                                   *
//******************************************************************************************
uint16_t dataAvailable()
{
  return chcount ;
}


//******************************************************************************************
//                    获得空闲的缓冲区空间                                 *
//******************************************************************************************
// 以块的形式返回空闲的缓冲区空间。                                                 *
//******************************************************************************************
uint16_t getFreeBufferSpace()
{
  return ( SRAM_CH_SIZE - chcount ) ;                   // 返回可用的块数
}


//******************************************************************************************
//                             缓冲区写入                                      *
//******************************************************************************************
// 将一个块（32 字节）写入 SPI RAM。                                                  *
// 不检查可用空间。 请参阅 spaceAvailable().                                     *
//******************************************************************************************
void bufferWrite ( uint8_t *b )
{
  spiram.write ( writeinx * CHUNKSIZE, b, CHUNKSIZE ) ; // 将字节放入 SRAM
  writeinx = ( writeinx + 1 ) % SRAM_CH_SIZE ;          // 必要时递增和换行
  chcount++ ;                                           // 计算块数
}


//******************************************************************************************
//                             缓冲读取                                         *
//******************************************************************************************
// 读取用户缓冲区中的一个块。                                                     *
// 假设缓冲区中总是有东西。见 dataAvailable()                *
//******************************************************************************************
void bufferRead ( uint8_t *b )
{
  spiram.read ( readinx * CHUNKSIZE, b, CHUNKSIZE ) ;   // 返回下一个块
  readinx = ( readinx + 1 ) % SRAM_CH_SIZE ;            // 必要时递增和换行
  chcount-- ;                                           // 计数现在少一
}


//******************************************************************************************
//                            缓冲区重置                                        *
//******************************************************************************************
void bufferReset()
{
  readinx = 0 ;                                         // 重置环形缓冲区管理
  writeinx = 0 ;
  chcount = 0 ;
}


//******************************************************************************************
//                                SPI RAM 设置                                    *
//******************************************************************************************
void spiramSetup()
{
  spiram.begin() ;                                  // 初始化 ESP8266Spiram
  bufferReset() ;                                   // 重置环形缓冲区管理
}
